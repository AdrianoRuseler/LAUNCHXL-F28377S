//#############################################################################
// \file \cs30_f2837x\F2837xS_examples_Cpu1\cla_shellsort\cpu01\shellsort.cla
//
// \brief  Shell Sort
// \author Tri Thai
// \date   August 2, 2013
//
//
//  Group:             C2000
//  Target Family:    F2837xS
//
//#############################################################################
// $TI Release: F2837xS Support Library v210 $
// $Release Date: Tue Nov  1 15:35:23 CDT 2016 $
// $Copyright: Copyright (C) 2014-2016 Texas Instruments Incorporated -
//             http://www.ti.com/ ALL RIGHTS RESERVED $
//#############################################################################

//
// Included Files
//
#include "cla_shellsort_shared.h"

//
// Defines
//

//
// Globals
//

//
// Function Definitions
//
#define ARRAY_SIZE ((sizeof(vector1[])/sizeof(vector1[0])))

__interrupt void Cla1Task1 ( void )
{
    int32 gap, index, j;
    float temp;
    //
    // Copy the vector to cla to cpu message RAM
    //
    for(index=0; index < LENGTH1; index++)
    {
     vector1_sorted[index] = vector1[index];
    }
    //
    // Sort the array - shell sort
    //
    for(gap = LENGTH1/2; gap > 0; gap /= 2)
    {
      for (index = gap; index < LENGTH1; index++)
      {
           for (j = index-gap; j >= 0 && vector1_sorted[j] > vector1_sorted[j+gap]; j-= gap)
           {
              temp = vector1_sorted[j];
              vector1_sorted[j] = vector1_sorted[j+gap];
              vector1_sorted[j+gap] = temp;
           }
      }
    }
}

//
// Sort the array - shell short with mswapf intrinsic
//
__interrupt void Cla1Task2 ( void )
{
    int32 gap, index, j;

    //
    // Copy the vector to cla to cpu message RAM
    //
    for(index=0; index < LENGTH2; index++)
    {
     vector2_sorted[index] = vector2[index];
    }

    //
    // Sort the array - shell sort use swapf32 intrinsic
    //
    for(gap = LENGTH2/2; gap > 0; gap /= 2)
    {
      for (index = gap; index < LENGTH2; index++)
      {
           for (j = index-gap; j >= 0 && vector2_sorted[j] < vector2_sorted[j+gap]; j-= gap)
           {
              __mswapf(vector2_sorted[j], vector2_sorted[j+1]);
           }
      }
    }
}

//
// Similar - but the vector is integer instead of float
// Use one vector in data RAM for both in/out
//
__interrupt void Cla1Task3 ( void )
{
    int32 gap, index, j;
    int32 temp;

    //
    // Sort the array - shell sort
    //
    for(gap = LENGTH3/2; gap > 0; gap /= 2)
    {
      for (index = gap; index < LENGTH3; index++)
      {
           for (j = index-gap; j >= 0 && vector3[j] < vector3[j+gap]; j-= gap)
           {
              temp = vector3[j];
              vector3[j] = vector3[j+gap];
              vector3[j+gap] = temp;
           }
      }
    }
}

__interrupt void Cla1Task4 ( void )
{

}

__interrupt void Cla1Task5 ( void )
{

}

__interrupt void Cla1Task6 ( void )
{

}

__interrupt void Cla1Task7 ( void )
{

}

__interrupt void Cla1Task8 ( void )
{

}

//
// End of file
//

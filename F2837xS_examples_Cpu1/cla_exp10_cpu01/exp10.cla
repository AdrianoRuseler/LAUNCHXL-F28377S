//#############################################################################
// \file cs30_f2837x\F2837xS_examples_Cpu1\cla_exp10\cpu01\exp10.cla
//
// \brief  Exponentiation Example
// \author Vishal Coelho
// \date   August 2, 2013
//
//
//  Group:             C2000
//  Target Family:    F2837xS
//
//#############################################################################
// $TI Release: F2837xS Support Library v210 $
// $Release Date: Tue Nov  1 15:35:23 CDT 2016 $
// $Copyright: Copyright (C) 2014-2016 Texas Instruments Incorporated -
//             http://www.ti.com/ ALL RIGHTS RESERVED $
//#############################################################################

//
// Included Files
//
#include "cla_exp10_shared.h"

//
// Defines
//

//
// Globals
//

//
// Function Definitions
//
//Task 1 : 10^(X)
/* Derivation:
 *  X = X.1
 *    = X.log10(10)
 *    = log10(10^X)
 *    = ln(10^X)/ln(10)
 * Multiplying both sides by ln(10) we get
 * X.ln(10) = ln(10^X)
 * Taking the exponential of both sides we get
 * e^(X.ln(10)) = e^(ln(10^X))
 * 10^X = e^(X.ln(10))
 * Also note that ln(10) = log10(10)/log10(e) = 1/log10(e)
 * Therefore, 10^X = e^(X.ln(10)) or e^(X/log10(e)), whichever proves to be easier
 *
 * 10^X = e^(2.30258509.X)
 *
 * Description:
 *  Step(1):   Calculate absolute of x/LOG10(e) (or x*LN(10))
 *
 *  Step(2):   Identify the integer and mantissa of the input
 *
 *  Step(3):   Obtain the e^integer(x) from the table
 *
 *  Step(4):   Calculate the value of e^(mantissa)by using the
 *             polynomial approx = 1 + x*(1+x*0.5(1+(x/3)(1+x/4*(1+Xm/5*(1+Xm/6*(1+Xm/7))))))
 *
 *  Step(5):   The value of e^x is the product of results from (3)&(4)
 */
__interrupt void Cla1Task1 ( void )
{
    //Local Variables
    float X;        //Exponent
    float Xm;       //Residue
    int Idx;        //index into EXP table

    float Ei,Em;    //Exponent(Integer), Exponent(Mantissa)
    float result;
    float temp;

    __mdebugstop();

    //
    //Step(1):    Calculate absolute of x/LOG10(e) (or x*LN(10))
    //
    X = fabs(Val*CLALOG10_E);

    //
    //Step(2):   Identify the integer and mantissa of the input
    //
    Idx = (int)X;
    Xm = __mfracf32(X);

    //
    //Step(3):   Obtain the e^integer(x) from the table
    //
    Ei = CLAexpTable[Idx];
    Em = CLAINV1 + Xm*(CLAINV1 + Xm*CLAINV2 *(CLAINV1+(Xm*CLAINV3) \
                 *(CLAINV1+(Xm*CLAINV4)*(CLAINV1+(Xm*CLAINV5) \
                 *(CLAINV1+(Xm*CLAINV6)*(CLAINV1+Xm*CLAINV7))))));
    result = Ei*Em;

    temp = 1/result;
    if(Val < 0.0)
    {
        result = temp;
    }

    ExpRes  = result;
//    READ_CLOCK(ulCycleCount[1]);
}

interrupt void Cla1Task2 ( void )
{

}

interrupt void Cla1Task3 ( void )
{

}

interrupt void Cla1Task4 ( void )
{

}

interrupt void Cla1Task5 ( void )
{

}

interrupt void Cla1Task6 ( void )
{

}

interrupt void Cla1Task7 ( void )
{

}

interrupt void Cla1Task8 ( void )
{

}

//
// End of file
//

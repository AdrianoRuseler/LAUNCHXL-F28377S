//#############################################################################
// \file f2837x/F2837x_internal_testcases/CLA/crc8/crc8.cla
//
// \brief  8-bit CRC Example
// \author Vishal Coelho
// \date   Apr 8, 2013
//
//
//  Group:             C2000
//  Target Family:    F2837xS
//
//#############################################################################
// $TI Release: F2837xS Support Library v210 $
// $Release Date: Tue Nov  1 15:35:23 CDT 2016 $
// $Copyright: Copyright (C) 2014-2016 Texas Instruments Incorporated -
//             http://www.ti.com/ ALL RIGHTS RESERVED $
//#############################################################################

//
// Included Files
//
#include "cla_crc8_shared.h"

//
// Defines
//
#define POLYNOMIAL8  0x07

//
// Globals
//

//
// Function Prototypes
//
void gentable(void);
uint16_t byte1(uint16_t data, uint16_t select);
uint16_t byte2(uint16_t data, uint16_t select);
uint16_t byte3(uint16_t data, uint16_t select);

//
// Function Definitions
//
//Task 1 : Calculate 8-bit CRC

__interrupt void Cla1Task1 ( void )
{
   uint16_t i, j, temp1, temp2;
   crc8_msg1 = 0;
   crc8_msg2 = 0;
   crc8_msg3 = 0;
   crc8_msg4 = 0;
   //
   // Each for loop performs a CRC
   // They are just written differently
   //

   for (j=0; j < 12; j++)
   {

     i = crc8_msg2 ^ (byte1(msg2[j], 0));
     crc8_msg2 = table[i];

     i = crc8_msg2 ^ (byte2(msg2[j], 1));
     crc8_msg2 = table[i];
   }


   for (j=0; j < 5; j++)
   {
     temp1 = byte1(msg1[j], 0);
     i = crc8_msg1 ^ temp1;
     crc8_msg1 = table[i];

     temp1 = byte1(msg1[j], 1);
     i = crc8_msg1 ^ temp1;
     crc8_msg1 = table[i];
   }

   for (j=0; j < 5; j++)
   {
     temp1 = 0;
     temp1 = crc8_msg3 ^ (byte2(msg3[j], temp1));
     temp2 = 1;
     crc8_msg3 = table[temp1];
     temp2 = crc8_msg3 ^ (byte2(msg3[j], temp2));
     crc8_msg3 = table[temp2];
   }

   for (j=0; j < 12; j++)
   {
     temp1 = 0;
     i = crc8_msg4 ^ (byte3(msg4[j], temp1));
     crc8_msg4 = table[i];

     temp2 = 1;
     i = crc8_msg4 ^ (byte3(msg4[j], temp2));
     crc8_msg4 = table[i];
   }
}

interrupt void Cla1Task2 ( void )
{

}

interrupt void Cla1Task3 ( void )
{

}

interrupt void Cla1Task4 ( void )
{

}

interrupt void Cla1Task5 ( void )
{

}

interrupt void Cla1Task6 ( void )
{

}

interrupt void Cla1Task7 ( void )
{

}

interrupt void Cla1Task8 ( void )
{

}

uint16_t byte1(uint16_t data, uint16_t select)
{
    uint16_t res;
    if(select == 0)
    {
        res = (data & 0xff);
    }
    else
    {
        res = ((data & 0xff<<8) >> 8);
    }
    return res;
}

uint16_t byte2(uint16_t data, uint16_t select)
{
    if(select == 0)
    {
        return (data & 0xff);
    }
    else
    {
        return ((data & 0xff<<8) >> 8);
    }
}

uint16_t byte3(uint16_t data, uint16_t select)
{
    uint16_t res;
    switch(select)
    {
        case 0 : res =  (data & 0xff);
                 break;
        case 1 : res =  ((data & 0xff<<8) >> 8);
                 break;
    }
    return res;
}

//
// End of file
//

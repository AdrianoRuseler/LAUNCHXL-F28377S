//#############################################################################
// \file f2837x/F2837x_internal_testcases/CLA/exp2/exp2.cla
//
// \brief  Exponentiation Example
// \author Vishal Coelho
// \date   Apr 8, 2013
//
//
//  Group:             C2000
//  Target Family:    F2837xS
//
//#############################################################################
// $TI Release: F2837xS Support Library v210 $
// $Release Date: Tue Nov  1 15:35:23 CDT 2016 $
// $Copyright: Copyright (C) 2014-2016 Texas Instruments Incorporated -
//             http://www.ti.com/ ALL RIGHTS RESERVED $
//#############################################################################

//
// Included Files
//
#include "cla_exp2_shared.h"

//
// Defines
//

//
// Globals
//

//
// Function Definitions
//
//Task 1 : e^(A/B)
// Description:
//  Step(1):   Calculate absolute of x=A/B
//
//  Step(2):   Identify the integer and mantissa of the input
//
//  Step(3):   Obtain the e^integer(x) from the table
//
//  Step(4):   Calculate the value of e^(mantissa)by using the
//  polynomial approx = 1 + x*(1+x*0.5(1+(x/3)(1+x/4(1+X/5*(1+Xm/6*(1+Xm/7))))))
//
//  Step(5):   The value of e^x is the product of results from (3)&(4)
interrupt void Cla1Task1 ( void )
{
    //
    //Local Variables
    //
    float X;        //Exponent
    float Y;
    float Xm;       //Residue
    int Idx;        //index into EXP table

    float Ei,Em;    //Exponent(Integer), Exponent(Mantissa)
    float result;
    float temp;

    __mdebugstop();

    //
    //Step(1):   Calculate absolute of x=A/B
    //
    Y = Num/Den;
    X = fabs(Y);

    //
    //Step(2):   Identify the integer and mantissa of the input
    //
    Idx = (int)X;
    Xm = __mfracf32(X);

    //
    //Step(3):   Obtain the e^integer(x) from the table
    //
    Ei = CLAexpTable[Idx];
    Em = CLAINV1 + Xm*(CLAINV1+Xm*CLAINV2*(CLAINV1+(Xm*CLAINV3) \
                 *(CLAINV1+(Xm*CLAINV4)*(CLAINV1+(Xm*CLAINV5) \
                 *(CLAINV1+(Xm*CLAINV6)*(CLAINV1+Xm*CLAINV7))))));
    result = Ei*Em;

    temp = 1.0/result;
    if(Y < 0.0)
    {
        result = temp;
    }

    ExpRes = result;
}

interrupt void Cla1Task2 ( void )
{

}

interrupt void Cla1Task3 ( void )
{

}

interrupt void Cla1Task4 ( void )
{

}

interrupt void Cla1Task5 ( void )
{

}

interrupt void Cla1Task6 ( void )
{

}

interrupt void Cla1Task7 ( void )
{

}

interrupt void Cla1Task8 ( void )
{

}

//
// End of file
//

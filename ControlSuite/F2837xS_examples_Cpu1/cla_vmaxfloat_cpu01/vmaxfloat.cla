//#############################################################################
// \file vmaxfloat.cla
//
// \brief  Vector Maximum
// \author Tri Thai
// \date   August 2, 2013
//
//
//  Group:             C2000
//  Target Family:    F2837xS
//
//#############################################################################
// $TI Release: F2837xS Support Library v210 $
// $Release Date: Tue Nov  1 15:35:23 CDT 2016 $
// $Copyright: Copyright (C) 2014-2016 Texas Instruments Incorporated -
//             http://www.ti.com/ ALL RIGHTS RESERVED $
//#############################################################################

//
// Included Files
//
#include "cla_vmaxfloat_shared.h"

//
// Defines
//

//
// Globals
//

//
// Function Definitions
//
//
// Task 1 : Vector max - brute force
// backward through the array
//
__interrupt void Cla1Task1 ( void )
{
    max1 = vector1[length1-1];
    index1 = length1-1;

    for(i = length1-1; i >= 0; i--)
    {
        if(vector1[i] > max1)
        {
           max1 = vector1[i];
           index1 = i;
        }
    }
}

//
// Task 2 : Vector max - brute force
// forward through the array
//
__interrupt void Cla1Task2 ( void )
{
    max2 = vector2[0];
    index2 = 0;

    for(i = 1; i < length2; i++)
    {
        if(vector2[i] > max2)
        {
           max2 = vector2[i];
           index2 = i;
        }
    }
}

//
// Task 3 : Vector max - brute force
// use conditional expressions
// local index variable
//
__interrupt void Cla1Task3 ( void )
{
    int32 local_index;
    max3 = vector3[0];
    index3 = 0;

    for(local_index = 1; local_index < LENGTH3; local_index++)
    {
        max3 = (vector3[local_index] > max3) ? vector3[local_index] : max3;
        index3 = (vector3[local_index] > max3) ? local_index : index3 ;
    }
}

//
// Task 4 : Vector min and max
// use intrinsics
// local index variable
//
__interrupt void Cla1Task4 ( void )
{
    int32 local_index;
    max4 = vector4[0];
    min4 = vector4[0];
    __mdebugstop();
    for(local_index = 1; local_index < LENGTH4; local_index++)
    {
       min4 = __mminf32(min4, vector4[local_index]);
       max4 = __mmaxf32(max4, vector4[local_index]);
    }
}

__interrupt void Cla1Task5 ( void )
{

}

__interrupt void Cla1Task6 ( void )
{

}

__interrupt void Cla1Task7 ( void )
{

}

__interrupt void Cla1Task8 ( void )
{

}

//
// End of file
//
